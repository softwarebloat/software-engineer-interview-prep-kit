{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome In this \"preparation kit\" i'm trying to explain how to prepare and how to deal Software Engineering interviews based on my experiences (it is originated out of my own personal notes while preparing for such interviews) Usually an interview for a Software Engineer role consists of multiple steps. The following are some of them that you could expect (not necessary all in one interview process): HR call Take home project (Optional) First tech interview usually a live coding session System Design interview A second live coding session Behavioral interview Troubleshooting Now, the process really depends by the company, but we could say that usually we have: A first call with the HR to understand the role and have first impressions A Tech interview that could consists of theory or coding live sessions or even both A final round that usually consists of multiple steps: System Design Troubleshooting Coding Session Behavioral But, as I said, this really depends from company to company Phase One Usually, every interview starts with a round of presentations of the participant. Preparing a presentation of yourself beforehand will help you a lot on focusing on what to say Tip The presentation doesn't have to be necessary the same every time. You could/should prepare a slightly different one for every kind of interview you have: Something more focused on your tech life in a Coding or System Design interview or something about your hobbies in a behavioral interview. This is up to you Phase Two Study the company that you applied for. Often the majority of the companies has a \"life at company\" website or section where you can learn a lot about the company culture, interview process and more. Take notes about things that you think are important and that match some of your experience so you can talk about it in the interviews. Phase Three The last minutes (10/15) of an interview is usually dedicated to allow the interviewee to ask questions about the company, the team, the role, etc... So don't get caught unprepared and prepare some questions on topics that you are interested in learning more about or of which you are interested in an opinion from an insider! Tip Take advantage of the Phase Two to understand which kind of question to do. Also, asking the same question to different people (if you'll have more interviews) in the same company could be very useful Questions examples : Are you happy with your work/life balance? What's your typical day at work? One thing that you like about working at and one that you don\u2019t","title":"Welcome"},{"location":"#welcome","text":"In this \"preparation kit\" i'm trying to explain how to prepare and how to deal Software Engineering interviews based on my experiences (it is originated out of my own personal notes while preparing for such interviews) Usually an interview for a Software Engineer role consists of multiple steps. The following are some of them that you could expect (not necessary all in one interview process): HR call Take home project (Optional) First tech interview usually a live coding session System Design interview A second live coding session Behavioral interview Troubleshooting Now, the process really depends by the company, but we could say that usually we have: A first call with the HR to understand the role and have first impressions A Tech interview that could consists of theory or coding live sessions or even both A final round that usually consists of multiple steps: System Design Troubleshooting Coding Session Behavioral But, as I said, this really depends from company to company","title":"Welcome"},{"location":"#phase-one","text":"Usually, every interview starts with a round of presentations of the participant. Preparing a presentation of yourself beforehand will help you a lot on focusing on what to say Tip The presentation doesn't have to be necessary the same every time. You could/should prepare a slightly different one for every kind of interview you have: Something more focused on your tech life in a Coding or System Design interview or something about your hobbies in a behavioral interview. This is up to you","title":"Phase One"},{"location":"#phase-two","text":"Study the company that you applied for. Often the majority of the companies has a \"life at company\" website or section where you can learn a lot about the company culture, interview process and more. Take notes about things that you think are important and that match some of your experience so you can talk about it in the interviews.","title":"Phase Two"},{"location":"#phase-three","text":"The last minutes (10/15) of an interview is usually dedicated to allow the interviewee to ask questions about the company, the team, the role, etc... So don't get caught unprepared and prepare some questions on topics that you are interested in learning more about or of which you are interested in an opinion from an insider! Tip Take advantage of the Phase Two to understand which kind of question to do. Also, asking the same question to different people (if you'll have more interviews) in the same company could be very useful Questions examples : Are you happy with your work/life balance? What's your typical day at work? One thing that you like about working at and one that you don\u2019t","title":"Phase Three"},{"location":"behavioral/","text":"Intro Behavioral interviews are always challenging to me. It's something that really can't have a wrong or right answer. It really depends by what the company/people is looking for and what's the culture of it. Advices As I said, I find it hard to prepare to such interviews. It's not something technical that you do or don't know. And sometimes (in my experiences) even a wrong word/phrase could cause a negative outcome of the interview Tip If it's available, go to the carrer page of the company to know more about its culture. Take down some note about it and try to match those with you experience examples Usually, the best thing to do is to talk about a very specific example and don't speak in general Good Let me tell you about that time I help my team mates solving a production bug in our user registration service: . . . Bad I always try to help people when they need something And having some specific examples of different situations you had in your carrer/life, will help a lot in answering those questions. For every story you had, try to point out key elements from this 6 categories that usually are questions that could be asked: Challenges Mistakes/Failures Enjoyed Leadership Conflicts What you'd do differently Example Questions Here you can find a couple of examples of questions that companies could ask (online you can find many, many more). By the way, it's impossible to prepare to all possible questions. There are too many. Instead, try to think and write down some really good examples from your carrer like moments where you handled negative feedback or you were collaborative , etc... Examples Why this company ? What are you looking for? Something from your carrer you are very proud of> A time you had to show disagreement? Something you regretted later? A time you introduced a new practice in the team which proved to be beneficial Again, those are just to have an idea but don't focus too much preparing answer for those questions but rather on examples. Questions At the end of the interview, you should have time to ask some question on topics you are interested in. Here's some examples of questions you could ask after a Behavioral interview: Are you happy with your work/life balance? What's your typical day at work? One thing that you like about working in <company> and one that you don\u2019t being in a squad working on a specific area, are you able to have different challenges over time? Resources Reads : Cracking the Coding Interview","title":"Behavioral"},{"location":"behavioral/#intro","text":"Behavioral interviews are always challenging to me. It's something that really can't have a wrong or right answer. It really depends by what the company/people is looking for and what's the culture of it.","title":"Intro"},{"location":"behavioral/#advices","text":"As I said, I find it hard to prepare to such interviews. It's not something technical that you do or don't know. And sometimes (in my experiences) even a wrong word/phrase could cause a negative outcome of the interview Tip If it's available, go to the carrer page of the company to know more about its culture. Take down some note about it and try to match those with you experience examples Usually, the best thing to do is to talk about a very specific example and don't speak in general Good Let me tell you about that time I help my team mates solving a production bug in our user registration service: . . . Bad I always try to help people when they need something And having some specific examples of different situations you had in your carrer/life, will help a lot in answering those questions. For every story you had, try to point out key elements from this 6 categories that usually are questions that could be asked: Challenges Mistakes/Failures Enjoyed Leadership Conflicts What you'd do differently","title":"Advices"},{"location":"behavioral/#example-questions","text":"Here you can find a couple of examples of questions that companies could ask (online you can find many, many more). By the way, it's impossible to prepare to all possible questions. There are too many. Instead, try to think and write down some really good examples from your carrer like moments where you handled negative feedback or you were collaborative , etc... Examples Why this company ? What are you looking for? Something from your carrer you are very proud of> A time you had to show disagreement? Something you regretted later? A time you introduced a new practice in the team which proved to be beneficial Again, those are just to have an idea but don't focus too much preparing answer for those questions but rather on examples.","title":"Example Questions"},{"location":"behavioral/#questions","text":"At the end of the interview, you should have time to ask some question on topics you are interested in. Here's some examples of questions you could ask after a Behavioral interview: Are you happy with your work/life balance? What's your typical day at work? One thing that you like about working in <company> and one that you don\u2019t being in a squad working on a specific area, are you able to have different challenges over time?","title":"Questions"},{"location":"behavioral/#resources","text":"Reads : Cracking the Coding Interview","title":"Resources"},{"location":"coding/","text":"Intro Now, almost all the Software Engineer interviews has a Live Coding step. Usually you can choose the programming language you are more comfortable with, but it could depends by the company Advices Some say that you have to prepare solving tons of \"hard\" problems on leetcode. But this really depends from company to company. Could be true for example for FAANG companies but not for others. So, besides training your Algorithms and DS knowledge, you should also focus on things like communication. Be used to explain your thought process. Don't be afraid of ask questions or even feedbacks. Feel free to make a decision but always explain it. Tip Of course you don't have to talk ALL THE TIME , take some time for thinking and breathing, but definitely communicate your ideas, what you intend to do, which problems you think you might run into, and so on. Topics You can find all the related info about Algorithms and Data Structure in platform like Leetcode. I don't see the need to deeply talk about them here at the moment Take a look at the Resources section for some content Questions At the end of the interview, you should have time to ask some question on topics you are interested in. Here's some examples of questions you could ask after a Live Coding interview: It\u2019s the infra/software self-hosted or do you use some cloud provider, or both? Do you have \u201con call\u201d? How does it work? How do you handle the sw fragmentation Do you need to align with other squads? If yes, how do you do that? Resources Platforms : LeetCode BinarySearch Exercism HackerRank AlgoExpert Reads : Cracking the Coding Interview Daily Coding Problem SW Eng Interview Prep YouTube Channels/Playlists : MIT 6.006 Introduction to Algorithms, Fall 2011 HackerRank Algorithms HackerRank Data Structure","title":"Coding"},{"location":"coding/#intro","text":"Now, almost all the Software Engineer interviews has a Live Coding step. Usually you can choose the programming language you are more comfortable with, but it could depends by the company","title":"Intro"},{"location":"coding/#advices","text":"Some say that you have to prepare solving tons of \"hard\" problems on leetcode. But this really depends from company to company. Could be true for example for FAANG companies but not for others. So, besides training your Algorithms and DS knowledge, you should also focus on things like communication. Be used to explain your thought process. Don't be afraid of ask questions or even feedbacks. Feel free to make a decision but always explain it. Tip Of course you don't have to talk ALL THE TIME , take some time for thinking and breathing, but definitely communicate your ideas, what you intend to do, which problems you think you might run into, and so on.","title":"Advices"},{"location":"coding/#topics","text":"You can find all the related info about Algorithms and Data Structure in platform like Leetcode. I don't see the need to deeply talk about them here at the moment Take a look at the Resources section for some content","title":"Topics"},{"location":"coding/#questions","text":"At the end of the interview, you should have time to ask some question on topics you are interested in. Here's some examples of questions you could ask after a Live Coding interview: It\u2019s the infra/software self-hosted or do you use some cloud provider, or both? Do you have \u201con call\u201d? How does it work? How do you handle the sw fragmentation Do you need to align with other squads? If yes, how do you do that?","title":"Questions"},{"location":"coding/#resources","text":"Platforms : LeetCode BinarySearch Exercism HackerRank AlgoExpert Reads : Cracking the Coding Interview Daily Coding Problem SW Eng Interview Prep YouTube Channels/Playlists : MIT 6.006 Introduction to Algorithms, Fall 2011 HackerRank Algorithms HackerRank Data Structure","title":"Resources"},{"location":"glossary/","text":"Glossary Here you can find some key arguments of computer science that usually could be asked in interviews Warning This list is intended as a starting point to brush up on some topics and not as a complete resource that cover every aspect of a specific topic. If you do not know any of the topics presented, please read more elsewhere. API Gateway separate business logic from common operations like: Authentication, Authorization, DDoS protection, routing, serve static response, caching responses, load balancing, A/B testing Authentication vs Authorization In simple terms, authentication is the process of verifying who a user is, while authorization is the process of verifying what they have access to. Automation (CI/CD) TODO Availability Is the time a system remains operational to perform its required function in a specific period. Bloom Filter A Bloom filter is a data structure designed to tell you, rapidly and memory-efficiently, whether an element is present in a set. The price paid for this efficiency is that a Bloom filter is a probabilistic data structure: it tells us that the element either definitely is not in the set or may be in the set. CAP Theorem CAP stands for: Consistency , Availability , Partition tolerance This theorem states that any distributed system can only achieve 2 of these 3 properties. Info since almost all useful systems do have network-partition tolerance , it\u2019s generally boiled down to Consistency VS Availability . CDN Stands for Content Delivery Network (CDN) refers to a geographically distributed group of servers which work together to provide fast delivery of Internet content. Benefits : Improving website load times Reducing bandwidth costs Increasing content availability and redundancy Improving website security(DDoS mitigation) Cache Caching is the mechanism of storing data in a temporary storage location, usually in memory, so that requests to the data can be served faster. Caching improves performance by decreasing page load times, and reduces the load on servers and databases. Cache hit : return response without ask data to server or db Cache miss : request sent to the server or db to fetch result. Result is than cached to the temporary storage and returned to the client Cache invalidation methods When data is updated in the database, then that data has to be refreshed in the cache as well. This is called cache invalidation. Method Description Write-through cache Data is written to the cache and database at the same time. Write-around cache Data is written to the database writing to cache. Data is written to cache when a request results in a 'cache miss', at which point data is retrieved from the database, written to cache, and sent back to the client. Write-back (Write-behind) cache Data is written to the cache without writing to the database. Data is written to the database asynchronously. Eviction algorithms First In First Out ( FIFO ) Last In First Out ( LIFO ) Least Recently Used ( LRU ) Least Frequently Used ( LFU ) Least Frequent Recently Used ( LFRU ) Consistent Hashing Is a hashing technique such that when a hash table (key map to the machine) is resized, only n/m keys need to be remapped. Key Description N number of keys M number of slots DNS The Domain Name System (DNS) is the phonebook of the Internet that maps domain names to IP addresses. Database (TODO) Which use? (SQL vs NoSQL) Scaling (vertical vs horizontal/sharding) Sharding: Is the act of splitting a db into 2 or more pieces called shards. Popular sharding strategies: based on client\u2019s regions based on the type of data stored (user data in one shard; payments data stored in another) based on the hash of a column (only for structured data) DB Replication Backup Vertical Scaling VS Horizontal Scaling DoS Is typically accomplished by flooding the targeted machine or resource with superfluous requests in an attempt to overload systems Eventual Consistency A consistency model which is unlike Strong Consistency. In this model, reads might return a view of the system that is stale. An eventually consistent datastore will give guarantees that the state of the database will eventually reflect writes within a time period (seconds or minutes) Gossip protocol Is a communication protocol that allows state sharing in distributed systems. he protocol enables each node to keep track of state information about the other nodes in the cluster, such as which nodes are reachable HTTP HTTP (Hypertext Transfer Protocol) is an (application layer) protocol designed to transfer information between networked devices. A typical flow over HTTP involves a client machine making a request to a server, which then sends a response message. HTTP Error Codes Error Code Description 1xx indicates an informational message only 2xx indicates success of some kind 3xx redirects the client to another URL 4xx indicates an error on the client\u2019s part 5xx indicates an error on the server\u2019s part HTTP Methods Method Description GET requests a representation of the specified resource. Requests using GET should only retrieve data. HEAD asks for a response identical to a GET request, but without the response body. POST submits an entity to the specified resource, often causing a change in state or side effects on the server. PUT submits an entity to the specified resource, often causing a change in state or side effects on the server. DELETE deletes the specified resource. CONNECT establishes a tunnel to the server identified by the target resource. OPTIONS describes the communication options for the target resource. TRACE performs a message loop-back test along the path to the target resource. PATCH applies partial modifications to a resource. HTTPS Hypertext Transfer Protocol Secure (HTTPS) is the secure version of HTTP. Technically speaking, HTTPS is not a separate protocol from HTTP. It is simply using TLS/SSL encryption over the HTTP protocol. HTTPS occurs based upon the transmission of TLS/SSL certificates, which verify that a particular provider is who they say they are. JWT (TODO) LoadBalancer reduces individual server load and prevents application servers from becoming a single point of failure forwarding traffic only to \u201chealth\u201d services. It could use different algorithms to do so like Round Robin or load-aware balancers Algorithms Method Description Least Connection Method Routes request to the server having the least number of active connections. Least Response Time Method Routes request to the server having the least number of active connections and lowest average response time. Round Robin Method Routes request to the first available server and then moves it to the end of the queue. Weighted Round Robin Method Routes request to the first available server having the highest weight. Each server is assigned a weight, an integer number, based on its processing capacity. Message queue vs message broker A message queue is a data structure, or a container - a way to hold messages for eventual consumption. A message broker is a separate component that manages queues. Brokers: Kafka, RabbitMQ, SNS/SQS Monitoring (TODO) Logging (TODO) Levels: Debug -> Info -> Warn -> Error Metrics (TODO) Tracing The goal of tracing is to follow a program\u2019s flow and data progression. Tracing allows you to see how you got there: which function, the function\u2019s duration, parameters passed, and how deep into the function the user could get. Pulling vs streaming (websockets) Short polling client continuously makes call to the server to retrieve data Pros Cons you can have a stateless server tons of requests to the server Long polling client makes the request to the server. The server can respond with the data requested or, if not ready/presents, it will keep open the connection to respond to the client when ready. Pros Cons not overload server with requests you tie up a connection between client and server Web sockets (TCP) open a connection between client and server and keep it open in both ways Pros Cons server is in control to when send data to the client a connections is opened between them the all time REST REST is an architectural style , or design pattern, for APIs. REST stands for REpresentational State Transfer . It means when a RESTful API is called, the server will transfer to the client a representation of the state of the requested resource. A resource can be any object the API can provide information about Rate limiting Is used to control the rate of requests sent or received. It can be used to prevent DoS attacks, or limit api usage. Redundancy Consists in a duplication of components of a system that tries to increase the reliability of this system. Reliability Is the probability a system will fail in a given period. A distributed system is considered reliable if it keeps delivering its services even when one or several of its software or hardware components fail. redundancy has a cost to achieve such resilience for services by eliminating every single point of failure. SLA - Service-Level Agreement The agreement you make with your users. Typically make guarantees on a system\u2019s availability. SLO - Service-Level Objective The objectives your team must hit to meet that agreement. Usually about specific metrics like uptime or response time. Scalability is the capability of a system, process, or a network to grow and manage increased demand. Scaling Type Description Horizontal More machines Vertical More power Stateful (TODO) dedicated storage Stateless (TODO) shared storage TCP vs UDP UDP is faster than TCP but less reliable. TCP establish connection via \u201chandshake\u201d (SYN -> SYN-ACK -> ACK) TCP indicates and confirms the order in which order packets should be received. UDP does not. Because of that, UDP is much faster but could lose packets (datagrams). So applications that use UDP must be able to tolerate errors (loss and duplication). So UDP is commonly used in time-sensitive communication where occasionally dropping packets is better than waiting (like voice and video application or online gaming and DNS servers) TLS TLS uses a technology called public key encryption: there are two keys, a public key and a private key, and the public key is shared with client devices via the server's SSL certificate. When a client opens a connection with a server, the two devices use the public and private key to agree on new keys (TLS handshake), called session keys, to encrypt further communications between them. Thread vs Process Processes are basically the programs that are dispatched from the ready state and are scheduled in the CPU for execution A process can create other processes which are known as Child Processes. Process is isolated (doesn\u2019t share memory with other process) Thread is the segment of a process (a process can have multiple threads) Threads are faster and share memory pub/sub Is a messaging model that consists of publishers and subscribers . Publishers publish messages to topics (also called channels) without knowing who will read those messages. Subscribers subscribe to topics and read messages coming through those topics.","title":"Glossary"},{"location":"glossary/#glossary","text":"Here you can find some key arguments of computer science that usually could be asked in interviews Warning This list is intended as a starting point to brush up on some topics and not as a complete resource that cover every aspect of a specific topic. If you do not know any of the topics presented, please read more elsewhere.","title":"Glossary"},{"location":"glossary/#api-gateway","text":"separate business logic from common operations like: Authentication, Authorization, DDoS protection, routing, serve static response, caching responses, load balancing, A/B testing","title":"API Gateway"},{"location":"glossary/#authentication-vs-authorization","text":"In simple terms, authentication is the process of verifying who a user is, while authorization is the process of verifying what they have access to.","title":"Authentication vs Authorization"},{"location":"glossary/#automation-cicd-todo","text":"","title":"Automation (CI/CD) TODO"},{"location":"glossary/#availability","text":"Is the time a system remains operational to perform its required function in a specific period.","title":"Availability"},{"location":"glossary/#bloom-filter","text":"A Bloom filter is a data structure designed to tell you, rapidly and memory-efficiently, whether an element is present in a set. The price paid for this efficiency is that a Bloom filter is a probabilistic data structure: it tells us that the element either definitely is not in the set or may be in the set.","title":"Bloom Filter"},{"location":"glossary/#cap-theorem","text":"CAP stands for: Consistency , Availability , Partition tolerance This theorem states that any distributed system can only achieve 2 of these 3 properties. Info since almost all useful systems do have network-partition tolerance , it\u2019s generally boiled down to Consistency VS Availability .","title":"CAP Theorem"},{"location":"glossary/#cdn","text":"Stands for Content Delivery Network (CDN) refers to a geographically distributed group of servers which work together to provide fast delivery of Internet content. Benefits : Improving website load times Reducing bandwidth costs Increasing content availability and redundancy Improving website security(DDoS mitigation)","title":"CDN"},{"location":"glossary/#cache","text":"Caching is the mechanism of storing data in a temporary storage location, usually in memory, so that requests to the data can be served faster. Caching improves performance by decreasing page load times, and reduces the load on servers and databases. Cache hit : return response without ask data to server or db Cache miss : request sent to the server or db to fetch result. Result is than cached to the temporary storage and returned to the client","title":"Cache"},{"location":"glossary/#cache-invalidation-methods","text":"When data is updated in the database, then that data has to be refreshed in the cache as well. This is called cache invalidation. Method Description Write-through cache Data is written to the cache and database at the same time. Write-around cache Data is written to the database writing to cache. Data is written to cache when a request results in a 'cache miss', at which point data is retrieved from the database, written to cache, and sent back to the client. Write-back (Write-behind) cache Data is written to the cache without writing to the database. Data is written to the database asynchronously.","title":"Cache invalidation methods"},{"location":"glossary/#eviction-algorithms","text":"First In First Out ( FIFO ) Last In First Out ( LIFO ) Least Recently Used ( LRU ) Least Frequently Used ( LFU ) Least Frequent Recently Used ( LFRU )","title":"Eviction algorithms"},{"location":"glossary/#consistent-hashing","text":"Is a hashing technique such that when a hash table (key map to the machine) is resized, only n/m keys need to be remapped. Key Description N number of keys M number of slots","title":"Consistent Hashing"},{"location":"glossary/#dns","text":"The Domain Name System (DNS) is the phonebook of the Internet that maps domain names to IP addresses.","title":"DNS"},{"location":"glossary/#database-todo","text":"Which use? (SQL vs NoSQL) Scaling (vertical vs horizontal/sharding)","title":"Database (TODO)"},{"location":"glossary/#sharding","text":"Is the act of splitting a db into 2 or more pieces called shards. Popular sharding strategies: based on client\u2019s regions based on the type of data stored (user data in one shard; payments data stored in another) based on the hash of a column (only for structured data)","title":"Sharding:"},{"location":"glossary/#db-replication","text":"Backup Vertical Scaling VS Horizontal Scaling","title":"DB Replication"},{"location":"glossary/#dos","text":"Is typically accomplished by flooding the targeted machine or resource with superfluous requests in an attempt to overload systems","title":"DoS"},{"location":"glossary/#eventual-consistency","text":"A consistency model which is unlike Strong Consistency. In this model, reads might return a view of the system that is stale. An eventually consistent datastore will give guarantees that the state of the database will eventually reflect writes within a time period (seconds or minutes)","title":"Eventual Consistency"},{"location":"glossary/#gossip-protocol","text":"Is a communication protocol that allows state sharing in distributed systems. he protocol enables each node to keep track of state information about the other nodes in the cluster, such as which nodes are reachable","title":"Gossip protocol"},{"location":"glossary/#http","text":"HTTP (Hypertext Transfer Protocol) is an (application layer) protocol designed to transfer information between networked devices. A typical flow over HTTP involves a client machine making a request to a server, which then sends a response message.","title":"HTTP"},{"location":"glossary/#http-error-codes","text":"Error Code Description 1xx indicates an informational message only 2xx indicates success of some kind 3xx redirects the client to another URL 4xx indicates an error on the client\u2019s part 5xx indicates an error on the server\u2019s part","title":"HTTP Error Codes"},{"location":"glossary/#http-methods","text":"Method Description GET requests a representation of the specified resource. Requests using GET should only retrieve data. HEAD asks for a response identical to a GET request, but without the response body. POST submits an entity to the specified resource, often causing a change in state or side effects on the server. PUT submits an entity to the specified resource, often causing a change in state or side effects on the server. DELETE deletes the specified resource. CONNECT establishes a tunnel to the server identified by the target resource. OPTIONS describes the communication options for the target resource. TRACE performs a message loop-back test along the path to the target resource. PATCH applies partial modifications to a resource.","title":"HTTP Methods"},{"location":"glossary/#https","text":"Hypertext Transfer Protocol Secure (HTTPS) is the secure version of HTTP. Technically speaking, HTTPS is not a separate protocol from HTTP. It is simply using TLS/SSL encryption over the HTTP protocol. HTTPS occurs based upon the transmission of TLS/SSL certificates, which verify that a particular provider is who they say they are.","title":"HTTPS"},{"location":"glossary/#jwt-todo","text":"","title":"JWT (TODO)"},{"location":"glossary/#loadbalancer","text":"reduces individual server load and prevents application servers from becoming a single point of failure forwarding traffic only to \u201chealth\u201d services. It could use different algorithms to do so like Round Robin or load-aware balancers","title":"LoadBalancer"},{"location":"glossary/#algorithms","text":"Method Description Least Connection Method Routes request to the server having the least number of active connections. Least Response Time Method Routes request to the server having the least number of active connections and lowest average response time. Round Robin Method Routes request to the first available server and then moves it to the end of the queue. Weighted Round Robin Method Routes request to the first available server having the highest weight. Each server is assigned a weight, an integer number, based on its processing capacity.","title":"Algorithms"},{"location":"glossary/#message-queue-vs-message-broker","text":"A message queue is a data structure, or a container - a way to hold messages for eventual consumption. A message broker is a separate component that manages queues. Brokers: Kafka, RabbitMQ, SNS/SQS","title":"Message queue vs message broker"},{"location":"glossary/#monitoring-todo","text":"","title":"Monitoring (TODO)"},{"location":"glossary/#logging-todo","text":"Levels: Debug -> Info -> Warn -> Error","title":"Logging (TODO)"},{"location":"glossary/#metrics-todo","text":"","title":"Metrics (TODO)"},{"location":"glossary/#tracing","text":"The goal of tracing is to follow a program\u2019s flow and data progression. Tracing allows you to see how you got there: which function, the function\u2019s duration, parameters passed, and how deep into the function the user could get.","title":"Tracing"},{"location":"glossary/#pulling-vs-streaming-websockets","text":"","title":"Pulling vs streaming (websockets)"},{"location":"glossary/#short-polling","text":"client continuously makes call to the server to retrieve data Pros Cons you can have a stateless server tons of requests to the server","title":"Short polling"},{"location":"glossary/#long-polling","text":"client makes the request to the server. The server can respond with the data requested or, if not ready/presents, it will keep open the connection to respond to the client when ready. Pros Cons not overload server with requests you tie up a connection between client and server","title":"Long polling"},{"location":"glossary/#web-sockets-tcp","text":"open a connection between client and server and keep it open in both ways Pros Cons server is in control to when send data to the client a connections is opened between them the all time","title":"Web sockets (TCP)"},{"location":"glossary/#rest","text":"REST is an architectural style , or design pattern, for APIs. REST stands for REpresentational State Transfer . It means when a RESTful API is called, the server will transfer to the client a representation of the state of the requested resource. A resource can be any object the API can provide information about","title":"REST"},{"location":"glossary/#rate-limiting","text":"Is used to control the rate of requests sent or received. It can be used to prevent DoS attacks, or limit api usage.","title":"Rate limiting"},{"location":"glossary/#redundancy","text":"Consists in a duplication of components of a system that tries to increase the reliability of this system.","title":"Redundancy"},{"location":"glossary/#reliability","text":"Is the probability a system will fail in a given period. A distributed system is considered reliable if it keeps delivering its services even when one or several of its software or hardware components fail. redundancy has a cost to achieve such resilience for services by eliminating every single point of failure.","title":"Reliability"},{"location":"glossary/#sla-service-level-agreement","text":"The agreement you make with your users. Typically make guarantees on a system\u2019s availability.","title":"SLA - Service-Level Agreement"},{"location":"glossary/#slo-service-level-objective","text":"The objectives your team must hit to meet that agreement. Usually about specific metrics like uptime or response time.","title":"SLO - Service-Level Objective"},{"location":"glossary/#scalability","text":"is the capability of a system, process, or a network to grow and manage increased demand. Scaling Type Description Horizontal More machines Vertical More power","title":"Scalability"},{"location":"glossary/#stateful-todo","text":"dedicated storage","title":"Stateful (TODO)"},{"location":"glossary/#stateless-todo","text":"shared storage","title":"Stateless (TODO)"},{"location":"glossary/#tcp-vs-udp","text":"UDP is faster than TCP but less reliable. TCP establish connection via \u201chandshake\u201d (SYN -> SYN-ACK -> ACK) TCP indicates and confirms the order in which order packets should be received. UDP does not. Because of that, UDP is much faster but could lose packets (datagrams). So applications that use UDP must be able to tolerate errors (loss and duplication). So UDP is commonly used in time-sensitive communication where occasionally dropping packets is better than waiting (like voice and video application or online gaming and DNS servers)","title":"TCP vs UDP"},{"location":"glossary/#tls","text":"TLS uses a technology called public key encryption: there are two keys, a public key and a private key, and the public key is shared with client devices via the server's SSL certificate. When a client opens a connection with a server, the two devices use the public and private key to agree on new keys (TLS handshake), called session keys, to encrypt further communications between them.","title":"TLS"},{"location":"glossary/#thread-vs-process","text":"Processes are basically the programs that are dispatched from the ready state and are scheduled in the CPU for execution A process can create other processes which are known as Child Processes. Process is isolated (doesn\u2019t share memory with other process) Thread is the segment of a process (a process can have multiple threads) Threads are faster and share memory","title":"Thread vs Process"},{"location":"glossary/#pubsub","text":"Is a messaging model that consists of publishers and subscribers . Publishers publish messages to topics (also called channels) without knowing who will read those messages. Subscribers subscribe to topics and read messages coming through those topics.","title":"pub/sub"},{"location":"system-design/","text":"Intro System Design interview questions are quite challenging. They are open ended questions with the objective to design an architecture for a software system. The questions are usually very big scoped and vague and there is no certain pattern to follow. The meaning of this kind of interviews is to evaluate the interviewee on how he/she analyzes a vague problem and how solves the problem step by step Advices Don't rush and try to be organized and structured. Explore the problem and ask questions to clarify the use cases. Do some quick analysis and if needed try to do some estimation If you are particularly strong in one area, try to direct the conversation towards that! (e.g.: DB choice) Try to divide the process into 4 steps : Understand the problem and establish design scope Propose high-level design and get buy-in Design deep dive Wrap up Example Questions To better understand the problem and gather requirements, we should ask some questions related to the problem we are facing. Examples Which functionality are we designing? Is it an MVP? Who will use the system? How will the system be used? How many users do we expect to use the system? Where are they located? Globally? Nationally? Do we know how many reads per second? How much data is queried per second? How many {data/image/video/resource} are processed per second? Should the design minimize the cost of Development? Should the design minimize the cost of Maintenance? Back of the envelope estimation Follow up Questions Once you finished your design, the interviewer could ask some followup questions like: what if we want to add functionality? What will you improve? Usually this doesn't mean that we should redesign our application but it's just a way to have more discussions about it, understand how you solve those challenges and your knowledge. Tip Generally speaking, you could improve an application by adding things like: multi Availability Zones (to improve availability and redundacy) monitoring/observability CDNs Topics Be prepared to talk about things like DB choice, cache , async vs sync processing, REST , Load Balancers , etc Some of the most commong topics are pointed out in the Glossary Some Common Problems Design a URL Shortening service Designe Instagram Design Twitter Design Youtube/Netflix Design an API Rate Limiter Design a messaging app Questions At the end of the interview, you should have time to ask some question on topics you are interested in. Here's some examples of questions you could ask after a System Design interview: It\u2019s the infra/software self-hosted or do you use some cloud provider, or both? Do you have \u201con call\u201d? How does it work? How do you handle the sw fragmentation Do you need to align with other squads? If yes, how do you do that? Resources Reads : ByteByteGo Blog System Design Interview - An Insider's Guide System Design Interview \u2013 An Insider's Guide: Volume 2 Cloudflare Learning Center System Design Primer Interviewing.io - A Senior Engineer's Guide to the System Design Interview YouTube Channels/Playlists : System Design Interview System Design by Gaurav Sen System Design by Narendra L IBM Technology","title":"System Design"},{"location":"system-design/#intro","text":"System Design interview questions are quite challenging. They are open ended questions with the objective to design an architecture for a software system. The questions are usually very big scoped and vague and there is no certain pattern to follow. The meaning of this kind of interviews is to evaluate the interviewee on how he/she analyzes a vague problem and how solves the problem step by step","title":"Intro"},{"location":"system-design/#advices","text":"Don't rush and try to be organized and structured. Explore the problem and ask questions to clarify the use cases. Do some quick analysis and if needed try to do some estimation If you are particularly strong in one area, try to direct the conversation towards that! (e.g.: DB choice) Try to divide the process into 4 steps : Understand the problem and establish design scope Propose high-level design and get buy-in Design deep dive Wrap up","title":"Advices"},{"location":"system-design/#example-questions","text":"To better understand the problem and gather requirements, we should ask some questions related to the problem we are facing. Examples Which functionality are we designing? Is it an MVP? Who will use the system? How will the system be used? How many users do we expect to use the system? Where are they located? Globally? Nationally? Do we know how many reads per second? How much data is queried per second? How many {data/image/video/resource} are processed per second? Should the design minimize the cost of Development? Should the design minimize the cost of Maintenance? Back of the envelope estimation","title":"Example Questions"},{"location":"system-design/#follow-up-questions","text":"Once you finished your design, the interviewer could ask some followup questions like: what if we want to add functionality? What will you improve? Usually this doesn't mean that we should redesign our application but it's just a way to have more discussions about it, understand how you solve those challenges and your knowledge. Tip Generally speaking, you could improve an application by adding things like: multi Availability Zones (to improve availability and redundacy) monitoring/observability CDNs","title":"Follow up Questions"},{"location":"system-design/#topics","text":"Be prepared to talk about things like DB choice, cache , async vs sync processing, REST , Load Balancers , etc Some of the most commong topics are pointed out in the Glossary Some Common Problems Design a URL Shortening service Designe Instagram Design Twitter Design Youtube/Netflix Design an API Rate Limiter Design a messaging app","title":"Topics"},{"location":"system-design/#questions","text":"At the end of the interview, you should have time to ask some question on topics you are interested in. Here's some examples of questions you could ask after a System Design interview: It\u2019s the infra/software self-hosted or do you use some cloud provider, or both? Do you have \u201con call\u201d? How does it work? How do you handle the sw fragmentation Do you need to align with other squads? If yes, how do you do that?","title":"Questions"},{"location":"system-design/#resources","text":"Reads : ByteByteGo Blog System Design Interview - An Insider's Guide System Design Interview \u2013 An Insider's Guide: Volume 2 Cloudflare Learning Center System Design Primer Interviewing.io - A Senior Engineer's Guide to the System Design Interview YouTube Channels/Playlists : System Design Interview System Design by Gaurav Sen System Design by Narendra L IBM Technology","title":"Resources"},{"location":"troubleshooting/","text":"Intro The Throubleshooting interview it's something \"weird\" that not all the companies do and it's something hard to prepare. But preparing for system design could help you. Usually it's an open ended question such as: two hours ago, we started getting alerts that ~5% of our customers cannot see ads Starting from there, you have to ask questions to retrieve more info, as if we were playing D&D. The goal here is to understand how you tackle problems and your reasoning process to get to the solution (but usually it is not mandatory to reach the end). Advices As we said, we should ask clarifying questions Imagine you are in a real situation and just explain what you would do, where would you search for clues, what would you look for, etc... The important thing is to show good thinking, good analytical skills, general knowledge of how different software systems work, and that you know how to deal with problems and try to solve them. Topics Preparing for System Design will help you with the Troubleshooting interview. So be prepared to talk about things like: Accessing Servers Viewing Logs Tracing and Metrics Unix Commands Distributed Systems Example Questions Examples is it a distributed system? Do we have multiple regions? What\u2019s the infrastructure? (k8s?) What Does the system look like? (services, dependencies, dbs, etc) have we released a new version recently? do we have logs and are they searchable? can we look at fields of alerting metrics? does it affect all clients or a specific one? (mobile, desktop, etc) is the problem global or a small area? (maybe it\u2019s only one region or zone) maybe it\u2019s just one replica? service/kernel/system version? Is it the same for every replica? Do we have tracing? -> easier to form hypothesis Do we know which host and timestamp to look at? Resources UNIX and Linux System Administration Handbook","title":"Troubleshooting"},{"location":"troubleshooting/#intro","text":"The Throubleshooting interview it's something \"weird\" that not all the companies do and it's something hard to prepare. But preparing for system design could help you. Usually it's an open ended question such as: two hours ago, we started getting alerts that ~5% of our customers cannot see ads Starting from there, you have to ask questions to retrieve more info, as if we were playing D&D. The goal here is to understand how you tackle problems and your reasoning process to get to the solution (but usually it is not mandatory to reach the end).","title":"Intro"},{"location":"troubleshooting/#advices","text":"As we said, we should ask clarifying questions Imagine you are in a real situation and just explain what you would do, where would you search for clues, what would you look for, etc... The important thing is to show good thinking, good analytical skills, general knowledge of how different software systems work, and that you know how to deal with problems and try to solve them.","title":"Advices"},{"location":"troubleshooting/#topics","text":"Preparing for System Design will help you with the Troubleshooting interview. So be prepared to talk about things like: Accessing Servers Viewing Logs Tracing and Metrics Unix Commands Distributed Systems","title":"Topics"},{"location":"troubleshooting/#example-questions","text":"Examples is it a distributed system? Do we have multiple regions? What\u2019s the infrastructure? (k8s?) What Does the system look like? (services, dependencies, dbs, etc) have we released a new version recently? do we have logs and are they searchable? can we look at fields of alerting metrics? does it affect all clients or a specific one? (mobile, desktop, etc) is the problem global or a small area? (maybe it\u2019s only one region or zone) maybe it\u2019s just one replica? service/kernel/system version? Is it the same for every replica? Do we have tracing? -> easier to form hypothesis Do we know which host and timestamp to look at?","title":"Example Questions"},{"location":"troubleshooting/#resources","text":"UNIX and Linux System Administration Handbook","title":"Resources"}]}